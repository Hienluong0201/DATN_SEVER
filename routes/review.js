// routes/review.js
const express = require('express');
const router = express.Router();
const mongoose = require('mongoose');
const Review = require('../models/Review');
const { uploadImage } = require('../middlewares/upload');
// 1. T·∫°o m·ªõi m·ªôt Review
// POST /reviews 
// POST /reviews
// POST /reviews
router.post('/', uploadImage.array('images'), async (req, res) => {
  console.log('üî• ƒê√É V√ÄO ROUTE /review');
  try {
    const { userID, productID, rating, comment, status } = req.body;

    if (!userID || !productID || rating == null) {
      return res.status(400).json({ message: 'Thi·∫øu userID, productID ho·∫∑c rating.' });
    }
    if (!mongoose.Types.ObjectId.isValid(userID) || !mongoose.Types.ObjectId.isValid(productID)) {
      return res.status(400).json({ message: 'userID ho·∫∑c productID kh√¥ng h·ª£p l·ªá.' });
    }

    // Ch·∫∑n t·∫°o tr√πng ·ªü t·∫ßng app (b·ªï sung cho unique index)
    const existed = await Review.findOne({ userID, productID });
    if (existed) {
      return res.status(409).json({ message: 'B·∫°n ƒë√£ ƒë√°nh gi√° s·∫£n ph·∫©m n√†y r·ªìi.' });
    }

    const imageUrls = req.files?.map(file => file.path) || [];
    const review = new Review({ userID, productID, rating, comment, status, images: imageUrls });

    const saved = await review.save();
    await saved.populate(['userID', 'productID']);
    return res.status(201).json(saved);
  } catch (err) {
    if (err?.code === 11000) {
      return res.status(409).json({ message: 'B·∫°n ch·ªâ ƒë∆∞·ª£c t·∫°o 1 review cho m·ªói s·∫£n ph·∫©m.' });
    }
    return res.status(500).json({ message: err.message });
  }
});



// 2. L·∫•y danh s√°ch t·∫•t c·∫£ Reviews
// GET /reviews
router.get('/', async (req, res) => {
  try {
    const reviews = await Review.find()
      .sort('-reviewDate')
      .populate('userID')
      .populate('productID');
    res.json(reviews);
  } catch (err) {
    res.status(500).json({ message: err.message });
  }
});

// 3. L·∫•y chi ti·∫øt m·ªôt Review theo id
// GET /reviews/:id
router.get('/:id', async (req, res) => {
  try {
    const review = await Review.findById(req.params.id)
      .populate('userID')
      .populate('productID');
    if (!review) {
      return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y review.' });
    }
    res.json(review);
  } catch (err) {
    res.status(500).json({ message: err.message });
  }
});
// 4b. L·∫•y t·∫•t c·∫£ Reviews c·ªßa m·ªôt Product
// GET /reviews/product/:productID
router.get('/product/:productID', async (req, res) => {
  try {
    const { productID } = req.params;
    const reviews = await Review.find({ productID })
      .sort('-reviewDate')
      .populate('userID')
      .populate('productID');
    res.json(reviews);
  } catch (err) {
    res.status(500).json({ message: err.message });
  }
});


// 4. C·∫≠p nh·∫≠t m·ªôt Review
// PUT /review/:id
// PUT /reviews/:id
router.put('/:id', uploadImage.array('images'), async (req, res) => {
  try {
    const { id } = req.params;
    const { userID, rating, comment, status } = req.body; // n√™n l·∫•y t·ª´ auth: req.user._id

    if (!mongoose.Types.ObjectId.isValid(id)) {
      return res.status(400).json({ message: 'review id kh√¥ng h·ª£p l·ªá.' });
    }

    // (Tu·ª≥ ch·ªçn) Ki·ªÉm tra quy·ªÅn s·ªü h·ªØu tr∆∞·ªõc ‚Äî n·∫øu b·∫°n c√≥ auth, so s√°nh v·ªõi req.user._id
    const current = await Review.findById(id).select('userID editCount');
    if (!current) return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y review.' });
    if (!userID || current.userID.toString() !== userID) {
      return res.status(403).json({ message: 'B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠a review n√†y.' });
    }

    // Chu·∫©n b·ªã field ƒë∆∞·ª£c ph√©p s·ª≠a
    const setFields = {};
    if (rating != null) setFields.rating = rating;
    if (comment !== undefined) setFields.comment = comment;
    if (status !== undefined) setFields.status = status;

    if (req.files?.length) {
      setFields.images = req.files.map(f => f.path);
    }

    // Atomic update: ch·ªâ update khi c√≤n l∆∞·ª£t (editCount < 1)
    const updated = await Review.findOneAndUpdate(
      { _id: id, userID, editCount: { $lt: 1 } },
      {
        $set: setFields,
        $inc: { editCount: 1 },
        $currentDate: { lastEditedAt: true }
      },
      { new: true }
    ).populate(['userID', 'productID']);

    if (!updated) {
      const latest = await Review.findById(id).select('editCount userID');
      if (!latest) return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y review.' });
      if (latest.editCount >= 1) {
        return res.status(403).json({ message: 'B·∫°n ƒë√£ h·∫øt l∆∞·ª£t s·ª≠a review (ch·ªâ ƒë∆∞·ª£c s·ª≠a 1 l·∫ßn).' });
      }
      return res.status(403).json({ message: 'B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠a review n√†y.' });
    }

    return res.json(updated);
  } catch (err) {
    return res.status(500).json({ message: err.message });
  }
});


// 5. X√≥a m·ªôt Review
// DELETE /reviews/:id
router.delete('/:id', async (req, res) => {
  try {
    const review = await Review.findById(req.params.id);
    if (!review) {
      return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y review.' });
    }
    await review.remove();
    res.json({ message: 'X√≥a review th√†nh c√¥ng.' });
  } catch (err) {
    res.status(500).json({ message: err.message });
  }
});
// GET /reviews/product/:productID/average-rating
router.get('/product/:productID/average-rating', async (req, res) => {
  try {
    const { productID } = req.params;

    // Ki·ªÉm tra ObjectId h·ª£p l·ªá
    if (!mongoose.Types.ObjectId.isValid(productID)) {
      return res.status(400).json({ message: "productID kh√¥ng h·ª£p l·ªá" });
    }

    const result = await Review.aggregate([
      {
        $match: {
          productID: new mongoose.Types.ObjectId(productID),
          status: true // ch·ªâ t√≠nh review ƒë√£ ƒë∆∞·ª£c duy·ªát
        }
      },
      {
        $group: {
          _id: "$productID",
          averageRating: { $avg: "$rating" },
          totalReviews: { $sum: 1 }
        }
      }
    ]);

    if (result.length === 0) {
      return res.json({ averageRating: 0, totalReviews: 0 });
    }

    res.json({
      averageRating: Math.round(result[0].averageRating * 10) / 10, // L√†m tr√≤n 1 ch·ªØ s·ªë
      totalReviews: result[0].totalReviews
    });
  } catch (err) {
    res.status(500).json({ message: err.message });
  }
});

// ·∫®n/hi·ªán m·ªôt review (ch·ªâ c·∫≠p nh·∫≠t status)
// PATCH /reviews/:id/status
router.patch('/:id/status', async (req, res) => {
  try {
    const { id } = req.params;
    const { status } = req.body;

    if (!mongoose.Types.ObjectId.isValid(id)) {
      return res.status(400).json({ message: 'review id kh√¥ng h·ª£p l·ªá.' });
    }

    if (typeof status !== 'boolean') {
      return res.status(400).json({ message: 'status ph·∫£i l√† true ho·∫∑c false.' });
    }

    const updated = await Review.findByIdAndUpdate(
      id,
      { status },
      { new: true }
    ).populate(['userID', 'productID']);

    if (!updated) {
      return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y review.' });
    }

    return res.json(updated);
  } catch (err) {
    return res.status(500).json({ message: err.message });
  }
});


module.exports = router;
